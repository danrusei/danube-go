// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.12.4
// source: DanubeApi.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProducerAccessMode int32

const (
	ProducerAccessMode_Shared    ProducerAccessMode = 0 // multiple producers can publish on a topic
	ProducerAccessMode_Exclusive ProducerAccessMode = 1 // exclusive access for producer
)

// Enum value maps for ProducerAccessMode.
var (
	ProducerAccessMode_name = map[int32]string{
		0: "Shared",
		1: "Exclusive",
	}
	ProducerAccessMode_value = map[string]int32{
		"Shared":    0,
		"Exclusive": 1,
	}
)

func (x ProducerAccessMode) Enum() *ProducerAccessMode {
	p := new(ProducerAccessMode)
	*p = x
	return p
}

func (x ProducerAccessMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProducerAccessMode) Descriptor() protoreflect.EnumDescriptor {
	return file_DanubeApi_proto_enumTypes[0].Descriptor()
}

func (ProducerAccessMode) Type() protoreflect.EnumType {
	return &file_DanubeApi_proto_enumTypes[0]
}

func (x ProducerAccessMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProducerAccessMode.Descriptor instead.
func (ProducerAccessMode) EnumDescriptor() ([]byte, []int) {
	return file_DanubeApi_proto_rawDescGZIP(), []int{0}
}

type ErrorType int32

const (
	ErrorType_UNKNOWN_ERROR               ErrorType = 0
	ErrorType_INVALID_TOPIC_NAME          ErrorType = 1 // The topic name is not valid
	ErrorType_TOPIC_NOT_FOUND             ErrorType = 2 // Topic not found
	ErrorType_SERVICE_NOT_READY           ErrorType = 3 // Any error that requires client retry operation with a fresh lookup
	ErrorType_PRODUCER_ALREADY_EXISTS     ErrorType = 4
	ErrorType_SUBSCRIBE_PERMISSION_DENIED ErrorType = 5
	ErrorType_SUBSCRIPTION_NOT_FOUND      ErrorType = 6 // Subscription not found
)

// Enum value maps for ErrorType.
var (
	ErrorType_name = map[int32]string{
		0: "UNKNOWN_ERROR",
		1: "INVALID_TOPIC_NAME",
		2: "TOPIC_NOT_FOUND",
		3: "SERVICE_NOT_READY",
		4: "PRODUCER_ALREADY_EXISTS",
		5: "SUBSCRIBE_PERMISSION_DENIED",
		6: "SUBSCRIPTION_NOT_FOUND",
	}
	ErrorType_value = map[string]int32{
		"UNKNOWN_ERROR":               0,
		"INVALID_TOPIC_NAME":          1,
		"TOPIC_NOT_FOUND":             2,
		"SERVICE_NOT_READY":           3,
		"PRODUCER_ALREADY_EXISTS":     4,
		"SUBSCRIBE_PERMISSION_DENIED": 5,
		"SUBSCRIPTION_NOT_FOUND":      6,
	}
)

func (x ErrorType) Enum() *ErrorType {
	p := new(ErrorType)
	*p = x
	return p
}

func (x ErrorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorType) Descriptor() protoreflect.EnumDescriptor {
	return file_DanubeApi_proto_enumTypes[1].Descriptor()
}

func (ErrorType) Type() protoreflect.EnumType {
	return &file_DanubeApi_proto_enumTypes[1]
}

func (x ErrorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorType.Descriptor instead.
func (ErrorType) EnumDescriptor() ([]byte, []int) {
	return file_DanubeApi_proto_rawDescGZIP(), []int{1}
}

type ConsumerRequest_SubscriptionType int32

const (
	ConsumerRequest_Exclusive ConsumerRequest_SubscriptionType = 0 // Only one consumer can subscribe to the topic at a time.
	ConsumerRequest_Shared    ConsumerRequest_SubscriptionType = 1 // Multiple consumers can subscribe to the topic concurrently.
	ConsumerRequest_Failover  ConsumerRequest_SubscriptionType = 2 // Only one consumer (the active consumer) receives messages at any given time.
)

// Enum value maps for ConsumerRequest_SubscriptionType.
var (
	ConsumerRequest_SubscriptionType_name = map[int32]string{
		0: "Exclusive",
		1: "Shared",
		2: "Failover",
	}
	ConsumerRequest_SubscriptionType_value = map[string]int32{
		"Exclusive": 0,
		"Shared":    1,
		"Failover":  2,
	}
)

func (x ConsumerRequest_SubscriptionType) Enum() *ConsumerRequest_SubscriptionType {
	p := new(ConsumerRequest_SubscriptionType)
	*p = x
	return p
}

func (x ConsumerRequest_SubscriptionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConsumerRequest_SubscriptionType) Descriptor() protoreflect.EnumDescriptor {
	return file_DanubeApi_proto_enumTypes[2].Descriptor()
}

func (ConsumerRequest_SubscriptionType) Type() protoreflect.EnumType {
	return &file_DanubeApi_proto_enumTypes[2]
}

func (x ConsumerRequest_SubscriptionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConsumerRequest_SubscriptionType.Descriptor instead.
func (ConsumerRequest_SubscriptionType) EnumDescriptor() ([]byte, []int) {
	return file_DanubeApi_proto_rawDescGZIP(), []int{5, 0}
}

type TopicLookupResponse_LookupType int32

const (
	TopicLookupResponse_Redirect TopicLookupResponse_LookupType = 0
	TopicLookupResponse_Connect  TopicLookupResponse_LookupType = 1
	TopicLookupResponse_Failed   TopicLookupResponse_LookupType = 2
)

// Enum value maps for TopicLookupResponse_LookupType.
var (
	TopicLookupResponse_LookupType_name = map[int32]string{
		0: "Redirect",
		1: "Connect",
		2: "Failed",
	}
	TopicLookupResponse_LookupType_value = map[string]int32{
		"Redirect": 0,
		"Connect":  1,
		"Failed":   2,
	}
)

func (x TopicLookupResponse_LookupType) Enum() *TopicLookupResponse_LookupType {
	p := new(TopicLookupResponse_LookupType)
	*p = x
	return p
}

func (x TopicLookupResponse_LookupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TopicLookupResponse_LookupType) Descriptor() protoreflect.EnumDescriptor {
	return file_DanubeApi_proto_enumTypes[3].Descriptor()
}

func (TopicLookupResponse_LookupType) Type() protoreflect.EnumType {
	return &file_DanubeApi_proto_enumTypes[3]
}

func (x TopicLookupResponse_LookupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TopicLookupResponse_LookupType.Descriptor instead.
func (TopicLookupResponse_LookupType) EnumDescriptor() ([]byte, []int) {
	return file_DanubeApi_proto_rawDescGZIP(), []int{12, 0}
}

type Schema_TypeSchema int32

const (
	Schema_Bytes  Schema_TypeSchema = 0
	Schema_String Schema_TypeSchema = 1
	Schema_Int64  Schema_TypeSchema = 2
	Schema_JSON   Schema_TypeSchema = 3
)

// Enum value maps for Schema_TypeSchema.
var (
	Schema_TypeSchema_name = map[int32]string{
		0: "Bytes",
		1: "String",
		2: "Int64",
		3: "JSON",
	}
	Schema_TypeSchema_value = map[string]int32{
		"Bytes":  0,
		"String": 1,
		"Int64":  2,
		"JSON":   3,
	}
)

func (x Schema_TypeSchema) Enum() *Schema_TypeSchema {
	p := new(Schema_TypeSchema)
	*p = x
	return p
}

func (x Schema_TypeSchema) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Schema_TypeSchema) Descriptor() protoreflect.EnumDescriptor {
	return file_DanubeApi_proto_enumTypes[4].Descriptor()
}

func (Schema_TypeSchema) Type() protoreflect.EnumType {
	return &file_DanubeApi_proto_enumTypes[4]
}

func (x Schema_TypeSchema) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Schema_TypeSchema.Descriptor instead.
func (Schema_TypeSchema) EnumDescriptor() ([]byte, []int) {
	return file_DanubeApi_proto_rawDescGZIP(), []int{15, 0}
}

type HealthCheckRequest_ClientType int32

const (
	HealthCheckRequest_Producer HealthCheckRequest_ClientType = 0
	HealthCheckRequest_Consumer HealthCheckRequest_ClientType = 1
)

// Enum value maps for HealthCheckRequest_ClientType.
var (
	HealthCheckRequest_ClientType_name = map[int32]string{
		0: "Producer",
		1: "Consumer",
	}
	HealthCheckRequest_ClientType_value = map[string]int32{
		"Producer": 0,
		"Consumer": 1,
	}
)

func (x HealthCheckRequest_ClientType) Enum() *HealthCheckRequest_ClientType {
	p := new(HealthCheckRequest_ClientType)
	*p = x
	return p
}

func (x HealthCheckRequest_ClientType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HealthCheckRequest_ClientType) Descriptor() protoreflect.EnumDescriptor {
	return file_DanubeApi_proto_enumTypes[5].Descriptor()
}

func (HealthCheckRequest_ClientType) Type() protoreflect.EnumType {
	return &file_DanubeApi_proto_enumTypes[5]
}

func (x HealthCheckRequest_ClientType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HealthCheckRequest_ClientType.Descriptor instead.
func (HealthCheckRequest_ClientType) EnumDescriptor() ([]byte, []int) {
	return file_DanubeApi_proto_rawDescGZIP(), []int{16, 0}
}

type HealthCheckResponse_ClientStatus int32

const (
	HealthCheckResponse_OK    HealthCheckResponse_ClientStatus = 0
	HealthCheckResponse_CLOSE HealthCheckResponse_ClientStatus = 1
)

// Enum value maps for HealthCheckResponse_ClientStatus.
var (
	HealthCheckResponse_ClientStatus_name = map[int32]string{
		0: "OK",
		1: "CLOSE",
	}
	HealthCheckResponse_ClientStatus_value = map[string]int32{
		"OK":    0,
		"CLOSE": 1,
	}
)

func (x HealthCheckResponse_ClientStatus) Enum() *HealthCheckResponse_ClientStatus {
	p := new(HealthCheckResponse_ClientStatus)
	*p = x
	return p
}

func (x HealthCheckResponse_ClientStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HealthCheckResponse_ClientStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_DanubeApi_proto_enumTypes[6].Descriptor()
}

func (HealthCheckResponse_ClientStatus) Type() protoreflect.EnumType {
	return &file_DanubeApi_proto_enumTypes[6]
}

func (x HealthCheckResponse_ClientStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HealthCheckResponse_ClientStatus.Descriptor instead.
func (HealthCheckResponse_ClientStatus) EnumDescriptor() ([]byte, []int) {
	return file_DanubeApi_proto_rawDescGZIP(), []int{17, 0}
}

// Create Producer request
type ProducerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId          uint64             `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	ProducerName       string             `protobuf:"bytes,3,opt,name=producer_name,json=producerName,proto3" json:"producer_name,omitempty"`
	TopicName          string             `protobuf:"bytes,4,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty"`
	Schema             *Schema            `protobuf:"bytes,5,opt,name=schema,proto3" json:"schema,omitempty"`
	ProducerAccessMode ProducerAccessMode `protobuf:"varint,6,opt,name=producer_access_mode,json=producerAccessMode,proto3,enum=danube.ProducerAccessMode" json:"producer_access_mode,omitempty"`
}

func (x *ProducerRequest) Reset() {
	*x = ProducerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DanubeApi_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProducerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProducerRequest) ProtoMessage() {}

func (x *ProducerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_DanubeApi_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProducerRequest.ProtoReflect.Descriptor instead.
func (*ProducerRequest) Descriptor() ([]byte, []int) {
	return file_DanubeApi_proto_rawDescGZIP(), []int{0}
}

func (x *ProducerRequest) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ProducerRequest) GetProducerName() string {
	if x != nil {
		return x.ProducerName
	}
	return ""
}

func (x *ProducerRequest) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

func (x *ProducerRequest) GetSchema() *Schema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *ProducerRequest) GetProducerAccessMode() ProducerAccessMode {
	if x != nil {
		return x.ProducerAccessMode
	}
	return ProducerAccessMode_Shared
}

// Create Producer response
type ProducerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId    uint64 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	ProducerId   uint64 `protobuf:"varint,2,opt,name=producer_id,json=producerId,proto3" json:"producer_id,omitempty"`
	ProducerName string `protobuf:"bytes,3,opt,name=producer_name,json=producerName,proto3" json:"producer_name,omitempty"`
}

func (x *ProducerResponse) Reset() {
	*x = ProducerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DanubeApi_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProducerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProducerResponse) ProtoMessage() {}

func (x *ProducerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_DanubeApi_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProducerResponse.ProtoReflect.Descriptor instead.
func (*ProducerResponse) Descriptor() ([]byte, []int) {
	return file_DanubeApi_proto_rawDescGZIP(), []int{1}
}

func (x *ProducerResponse) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ProducerResponse) GetProducerId() uint64 {
	if x != nil {
		return x.ProducerId
	}
	return 0
}

func (x *ProducerResponse) GetProducerName() string {
	if x != nil {
		return x.ProducerName
	}
	return ""
}

// Producer send the message
type MessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId  uint64           `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	ProducerId uint64           `protobuf:"varint,2,opt,name=producer_id,json=producerId,proto3" json:"producer_id,omitempty"`
	Metadata   *MessageMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Message    []byte           `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *MessageRequest) Reset() {
	*x = MessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DanubeApi_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageRequest) ProtoMessage() {}

func (x *MessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_DanubeApi_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageRequest.ProtoReflect.Descriptor instead.
func (*MessageRequest) Descriptor() ([]byte, []int) {
	return file_DanubeApi_proto_rawDescGZIP(), []int{2}
}

func (x *MessageRequest) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *MessageRequest) GetProducerId() uint64 {
	if x != nil {
		return x.ProducerId
	}
	return 0
}

func (x *MessageRequest) GetMetadata() *MessageMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *MessageRequest) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

type MessageMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifies the name of the producer that sent the message.
	ProducerName string `protobuf:"bytes,1,opt,name=producer_name,json=producerName,proto3" json:"producer_name,omitempty"`
	// Represents the sequence ID of the message within the topic
	// this is critical to maintain the messages order that are consumed by consumers
	SequenceId uint64 `protobuf:"varint,2,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	// Indicates the time when the message was published
	PublishTime uint64 `protobuf:"varint,3,opt,name=publish_time,json=publishTime,proto3" json:"publish_time,omitempty"`
}

func (x *MessageMetadata) Reset() {
	*x = MessageMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DanubeApi_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageMetadata) ProtoMessage() {}

func (x *MessageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_DanubeApi_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageMetadata.ProtoReflect.Descriptor instead.
func (*MessageMetadata) Descriptor() ([]byte, []int) {
	return file_DanubeApi_proto_rawDescGZIP(), []int{3}
}

func (x *MessageMetadata) GetProducerName() string {
	if x != nil {
		return x.ProducerName
	}
	return ""
}

func (x *MessageMetadata) GetSequenceId() uint64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (x *MessageMetadata) GetPublishTime() uint64 {
	if x != nil {
		return x.PublishTime
	}
	return 0
}

// Producer receive acknowledge for the sent message
type MessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId  uint64 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	SequenceId uint64 `protobuf:"varint,2,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
}

func (x *MessageResponse) Reset() {
	*x = MessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DanubeApi_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageResponse) ProtoMessage() {}

func (x *MessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_DanubeApi_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageResponse.ProtoReflect.Descriptor instead.
func (*MessageResponse) Descriptor() ([]byte, []int) {
	return file_DanubeApi_proto_rawDescGZIP(), []int{4}
}

func (x *MessageResponse) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *MessageResponse) GetSequenceId() uint64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

// Create Consumer request
type ConsumerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId        uint64                           `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	TopicName        string                           `protobuf:"bytes,2,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty"`
	ConsumerName     string                           `protobuf:"bytes,3,opt,name=consumer_name,json=consumerName,proto3" json:"consumer_name,omitempty"`
	Subscription     string                           `protobuf:"bytes,4,opt,name=subscription,proto3" json:"subscription,omitempty"`
	SubscriptionType ConsumerRequest_SubscriptionType `protobuf:"varint,5,opt,name=subscription_type,json=subscriptionType,proto3,enum=danube.ConsumerRequest_SubscriptionType" json:"subscription_type,omitempty"`
}

func (x *ConsumerRequest) Reset() {
	*x = ConsumerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DanubeApi_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsumerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumerRequest) ProtoMessage() {}

func (x *ConsumerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_DanubeApi_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumerRequest.ProtoReflect.Descriptor instead.
func (*ConsumerRequest) Descriptor() ([]byte, []int) {
	return file_DanubeApi_proto_rawDescGZIP(), []int{5}
}

func (x *ConsumerRequest) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ConsumerRequest) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

func (x *ConsumerRequest) GetConsumerName() string {
	if x != nil {
		return x.ConsumerName
	}
	return ""
}

func (x *ConsumerRequest) GetSubscription() string {
	if x != nil {
		return x.Subscription
	}
	return ""
}

func (x *ConsumerRequest) GetSubscriptionType() ConsumerRequest_SubscriptionType {
	if x != nil {
		return x.SubscriptionType
	}
	return ConsumerRequest_Exclusive
}

// Create Consumer response
type ConsumerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId    uint64 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	ConsumerId   uint64 `protobuf:"varint,2,opt,name=consumer_id,json=consumerId,proto3" json:"consumer_id,omitempty"`
	ConsumerName string `protobuf:"bytes,3,opt,name=consumer_name,json=consumerName,proto3" json:"consumer_name,omitempty"`
}

func (x *ConsumerResponse) Reset() {
	*x = ConsumerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DanubeApi_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsumerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumerResponse) ProtoMessage() {}

func (x *ConsumerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_DanubeApi_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumerResponse.ProtoReflect.Descriptor instead.
func (*ConsumerResponse) Descriptor() ([]byte, []int) {
	return file_DanubeApi_proto_rawDescGZIP(), []int{6}
}

func (x *ConsumerResponse) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ConsumerResponse) GetConsumerId() uint64 {
	if x != nil {
		return x.ConsumerId
	}
	return 0
}

func (x *ConsumerResponse) GetConsumerName() string {
	if x != nil {
		return x.ConsumerName
	}
	return ""
}

type ReceiveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId  uint64 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	ConsumerId uint64 `protobuf:"varint,2,opt,name=consumer_id,json=consumerId,proto3" json:"consumer_id,omitempty"`
}

func (x *ReceiveRequest) Reset() {
	*x = ReceiveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DanubeApi_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveRequest) ProtoMessage() {}

func (x *ReceiveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_DanubeApi_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveRequest.ProtoReflect.Descriptor instead.
func (*ReceiveRequest) Descriptor() ([]byte, []int) {
	return file_DanubeApi_proto_rawDescGZIP(), []int{7}
}

func (x *ReceiveRequest) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReceiveRequest) GetConsumerId() uint64 {
	if x != nil {
		return x.ConsumerId
	}
	return 0
}

type StreamMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId uint64 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Messages  []byte `protobuf:"bytes,2,opt,name=messages,proto3" json:"messages,omitempty"`
}

func (x *StreamMessage) Reset() {
	*x = StreamMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DanubeApi_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamMessage) ProtoMessage() {}

func (x *StreamMessage) ProtoReflect() protoreflect.Message {
	mi := &file_DanubeApi_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamMessage.ProtoReflect.Descriptor instead.
func (*StreamMessage) Descriptor() ([]byte, []int) {
	return file_DanubeApi_proto_rawDescGZIP(), []int{8}
}

func (x *StreamMessage) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *StreamMessage) GetMessages() []byte {
	if x != nil {
		return x.Messages
	}
	return nil
}

type AckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId uint64 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *AckRequest) Reset() {
	*x = AckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DanubeApi_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckRequest) ProtoMessage() {}

func (x *AckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_DanubeApi_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckRequest.ProtoReflect.Descriptor instead.
func (*AckRequest) Descriptor() ([]byte, []int) {
	return file_DanubeApi_proto_rawDescGZIP(), []int{9}
}

func (x *AckRequest) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

type AckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId uint64 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *AckResponse) Reset() {
	*x = AckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DanubeApi_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckResponse) ProtoMessage() {}

func (x *AckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_DanubeApi_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckResponse.ProtoReflect.Descriptor instead.
func (*AckResponse) Descriptor() ([]byte, []int) {
	return file_DanubeApi_proto_rawDescGZIP(), []int{10}
}

func (x *AckResponse) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

type TopicLookupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId uint64 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Topic     string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (x *TopicLookupRequest) Reset() {
	*x = TopicLookupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DanubeApi_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopicLookupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicLookupRequest) ProtoMessage() {}

func (x *TopicLookupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_DanubeApi_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicLookupRequest.ProtoReflect.Descriptor instead.
func (*TopicLookupRequest) Descriptor() ([]byte, []int) {
	return file_DanubeApi_proto_rawDescGZIP(), []int{11}
}

func (x *TopicLookupRequest) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *TopicLookupRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

type TopicLookupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId        uint64                         `protobuf:"varint,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	ResponseType     TopicLookupResponse_LookupType `protobuf:"varint,4,opt,name=response_type,json=responseType,proto3,enum=danube.TopicLookupResponse_LookupType" json:"response_type,omitempty"`
	BrokerServiceUrl string                         `protobuf:"bytes,5,opt,name=brokerServiceUrl,proto3" json:"brokerServiceUrl,omitempty"`
}

func (x *TopicLookupResponse) Reset() {
	*x = TopicLookupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DanubeApi_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopicLookupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicLookupResponse) ProtoMessage() {}

func (x *TopicLookupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_DanubeApi_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicLookupResponse.ProtoReflect.Descriptor instead.
func (*TopicLookupResponse) Descriptor() ([]byte, []int) {
	return file_DanubeApi_proto_rawDescGZIP(), []int{12}
}

func (x *TopicLookupResponse) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *TopicLookupResponse) GetResponseType() TopicLookupResponse_LookupType {
	if x != nil {
		return x.ResponseType
	}
	return TopicLookupResponse_Redirect
}

func (x *TopicLookupResponse) GetBrokerServiceUrl() string {
	if x != nil {
		return x.BrokerServiceUrl
	}
	return ""
}

type SchemaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId uint64 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Topic     string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (x *SchemaRequest) Reset() {
	*x = SchemaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DanubeApi_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaRequest) ProtoMessage() {}

func (x *SchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_DanubeApi_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaRequest.ProtoReflect.Descriptor instead.
func (*SchemaRequest) Descriptor() ([]byte, []int) {
	return file_DanubeApi_proto_rawDescGZIP(), []int{13}
}

func (x *SchemaRequest) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *SchemaRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

type SchemaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId uint64  `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Schema    *Schema `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (x *SchemaResponse) Reset() {
	*x = SchemaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DanubeApi_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaResponse) ProtoMessage() {}

func (x *SchemaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_DanubeApi_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaResponse.ProtoReflect.Descriptor instead.
func (*SchemaResponse) Descriptor() ([]byte, []int) {
	return file_DanubeApi_proto_rawDescGZIP(), []int{14}
}

func (x *SchemaResponse) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *SchemaResponse) GetSchema() *Schema {
	if x != nil {
		return x.Schema
	}
	return nil
}

type Schema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	SchemaData []byte            `protobuf:"bytes,3,opt,name=schema_data,json=schemaData,proto3" json:"schema_data,omitempty"`
	TypeSchema Schema_TypeSchema `protobuf:"varint,4,opt,name=type_schema,json=typeSchema,proto3,enum=danube.Schema_TypeSchema" json:"type_schema,omitempty"`
}

func (x *Schema) Reset() {
	*x = Schema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DanubeApi_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema) ProtoMessage() {}

func (x *Schema) ProtoReflect() protoreflect.Message {
	mi := &file_DanubeApi_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema.ProtoReflect.Descriptor instead.
func (*Schema) Descriptor() ([]byte, []int) {
	return file_DanubeApi_proto_rawDescGZIP(), []int{15}
}

func (x *Schema) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Schema) GetSchemaData() []byte {
	if x != nil {
		return x.SchemaData
	}
	return nil
}

func (x *Schema) GetTypeSchema() Schema_TypeSchema {
	if x != nil {
		return x.TypeSchema
	}
	return Schema_Bytes
}

type HealthCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId uint64                        `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Client    HealthCheckRequest_ClientType `protobuf:"varint,2,opt,name=client,proto3,enum=danube.HealthCheckRequest_ClientType" json:"client,omitempty"`
	Id        uint64                        `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *HealthCheckRequest) Reset() {
	*x = HealthCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DanubeApi_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckRequest) ProtoMessage() {}

func (x *HealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_DanubeApi_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckRequest.ProtoReflect.Descriptor instead.
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_DanubeApi_proto_rawDescGZIP(), []int{16}
}

func (x *HealthCheckRequest) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *HealthCheckRequest) GetClient() HealthCheckRequest_ClientType {
	if x != nil {
		return x.Client
	}
	return HealthCheckRequest_Producer
}

func (x *HealthCheckRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type HealthCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status HealthCheckResponse_ClientStatus `protobuf:"varint,1,opt,name=status,proto3,enum=danube.HealthCheckResponse_ClientStatus" json:"status,omitempty"`
}

func (x *HealthCheckResponse) Reset() {
	*x = HealthCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DanubeApi_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckResponse) ProtoMessage() {}

func (x *HealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_DanubeApi_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckResponse.ProtoReflect.Descriptor instead.
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_DanubeApi_proto_rawDescGZIP(), []int{17}
}

func (x *HealthCheckResponse) GetStatus() HealthCheckResponse_ClientStatus {
	if x != nil {
		return x.Status
	}
	return HealthCheckResponse_OK
}

// A message that encapsulate the error details
type ErrorMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorType    ErrorType `protobuf:"varint,1,opt,name=error_type,json=errorType,proto3,enum=danube.ErrorType" json:"error_type,omitempty"`
	ErrorMessage string    `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	RedirectTo   string    `protobuf:"bytes,3,opt,name=redirect_to,json=redirectTo,proto3" json:"redirect_to,omitempty"` // Optional: for redirection information
}

func (x *ErrorMessage) Reset() {
	*x = ErrorMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DanubeApi_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorMessage) ProtoMessage() {}

func (x *ErrorMessage) ProtoReflect() protoreflect.Message {
	mi := &file_DanubeApi_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorMessage.ProtoReflect.Descriptor instead.
func (*ErrorMessage) Descriptor() ([]byte, []int) {
	return file_DanubeApi_proto_rawDescGZIP(), []int{18}
}

func (x *ErrorMessage) GetErrorType() ErrorType {
	if x != nil {
		return x.ErrorType
	}
	return ErrorType_UNKNOWN_ERROR
}

func (x *ErrorMessage) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *ErrorMessage) GetRedirectTo() string {
	if x != nil {
		return x.RedirectTo
	}
	return ""
}

var File_DanubeApi_proto protoreflect.FileDescriptor

var file_DanubeApi_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x44, 0x61, 0x6e, 0x75, 0x62, 0x65, 0x41, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x06, 0x64, 0x61, 0x6e, 0x75, 0x62, 0x65, 0x22, 0xea, 0x01, 0x0a, 0x0f, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x64, 0x61, 0x6e, 0x75, 0x62, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x4c, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x64, 0x61, 0x6e, 0x75, 0x62, 0x65, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x77, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x9f, 0x01, 0x0a, 0x0e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x61, 0x6e, 0x75, 0x62, 0x65, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x7a, 0x0a, 0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x51, 0x0a,
	0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x22, 0xac, 0x02, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x11, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x64, 0x61, 0x6e, 0x75, 0x62, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x10, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x3b, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73,
	0x69, 0x76, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x10, 0x02, 0x22,
	0x77, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x50, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x0d, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x2b, 0x0a, 0x0a, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x22, 0x2c, 0x0a, 0x0b, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x22, 0x49, 0x0a, 0x12, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x22, 0xe2, 0x01, 0x0a,
	0x13, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x64, 0x61, 0x6e,
	0x75, 0x62, 0x65, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x55, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x33, 0x0a, 0x0a,
	0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10,
	0x02, 0x22, 0x44, 0x0a, 0x0d, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x22, 0x57, 0x0a, 0x0e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x61, 0x6e, 0x75, 0x62,
	0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x22, 0xb3, 0x01, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x3a, 0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x64, 0x61, 0x6e, 0x75, 0x62, 0x65, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0x38, 0x0a, 0x0a,
	0x54, 0x79, 0x70, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04,
	0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x03, 0x22, 0xac, 0x01, 0x0a, 0x12, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x06,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x64,
	0x61, 0x6e, 0x75, 0x62, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x28, 0x0a, 0x0a, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x72, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x10, 0x01, 0x22, 0x7a, 0x0a, 0x13, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x64,
	0x61, 0x6e, 0x75, 0x62, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x21,
	0x0a, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x06,
	0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10,
	0x01, 0x22, 0x86, 0x01, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x64, 0x61, 0x6e, 0x75, 0x62, 0x65, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x2a, 0x2f, 0x0a, 0x12, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x0a, 0x0a, 0x06, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x10, 0x01, 0x2a, 0xbc, 0x01, 0x0a, 0x09,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x4f, 0x50, 0x49, 0x43, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x4f, 0x50, 0x49, 0x43, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x03,
	0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x52,
	0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x04, 0x12, 0x1f, 0x0a,
	0x1b, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x05, 0x12, 0x1a,
	0x0a, 0x16, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x06, 0x32, 0x96, 0x01, 0x0a, 0x0f, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x43,
	0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x12, 0x17, 0x2e, 0x64, 0x61, 0x6e, 0x75, 0x62, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x64, 0x61, 0x6e, 0x75,
	0x62, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x16, 0x2e, 0x64, 0x61, 0x6e, 0x75, 0x62, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x64, 0x61, 0x6e,
	0x75, 0x62, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x32, 0xc5, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x12, 0x17, 0x2e, 0x64, 0x61, 0x6e, 0x75, 0x62, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x64, 0x61, 0x6e, 0x75, 0x62, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x64, 0x61, 0x6e,
	0x75, 0x62, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x15, 0x2e, 0x64, 0x61, 0x6e, 0x75, 0x62, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x30, 0x01, 0x12, 0x2e, 0x0a, 0x03, 0x41,
	0x63, 0x6b, 0x12, 0x12, 0x2e, 0x64, 0x61, 0x6e, 0x75, 0x62, 0x65, 0x2e, 0x41, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x64, 0x61, 0x6e, 0x75, 0x62, 0x65, 0x2e,
	0x41, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x8f, 0x01, 0x0a, 0x09,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x46, 0x0a, 0x0b, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x1a, 0x2e, 0x64, 0x61, 0x6e, 0x75, 0x62,
	0x65, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x64, 0x61, 0x6e, 0x75, 0x62, 0x65, 0x2e, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3a, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x15,
	0x2e, 0x64, 0x61, 0x6e, 0x75, 0x62, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x64, 0x61, 0x6e, 0x75, 0x62, 0x65, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x55, 0x0a,
	0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x46, 0x0a, 0x0b,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x1a, 0x2e, 0x64, 0x61,
	0x6e, 0x75, 0x62, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x64, 0x61, 0x6e, 0x75, 0x62, 0x65,
	0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x25, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x64, 0x61, 0x6e, 0x72, 0x75, 0x73, 0x65, 0x69, 0x2f, 0x64, 0x61, 0x6e, 0x75,
	0x62, 0x65, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_DanubeApi_proto_rawDescOnce sync.Once
	file_DanubeApi_proto_rawDescData = file_DanubeApi_proto_rawDesc
)

func file_DanubeApi_proto_rawDescGZIP() []byte {
	file_DanubeApi_proto_rawDescOnce.Do(func() {
		file_DanubeApi_proto_rawDescData = protoimpl.X.CompressGZIP(file_DanubeApi_proto_rawDescData)
	})
	return file_DanubeApi_proto_rawDescData
}

var file_DanubeApi_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_DanubeApi_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_DanubeApi_proto_goTypes = []any{
	(ProducerAccessMode)(0),               // 0: danube.ProducerAccessMode
	(ErrorType)(0),                        // 1: danube.ErrorType
	(ConsumerRequest_SubscriptionType)(0), // 2: danube.ConsumerRequest.SubscriptionType
	(TopicLookupResponse_LookupType)(0),   // 3: danube.TopicLookupResponse.LookupType
	(Schema_TypeSchema)(0),                // 4: danube.Schema.TypeSchema
	(HealthCheckRequest_ClientType)(0),    // 5: danube.HealthCheckRequest.ClientType
	(HealthCheckResponse_ClientStatus)(0), // 6: danube.HealthCheckResponse.ClientStatus
	(*ProducerRequest)(nil),               // 7: danube.ProducerRequest
	(*ProducerResponse)(nil),              // 8: danube.ProducerResponse
	(*MessageRequest)(nil),                // 9: danube.MessageRequest
	(*MessageMetadata)(nil),               // 10: danube.MessageMetadata
	(*MessageResponse)(nil),               // 11: danube.MessageResponse
	(*ConsumerRequest)(nil),               // 12: danube.ConsumerRequest
	(*ConsumerResponse)(nil),              // 13: danube.ConsumerResponse
	(*ReceiveRequest)(nil),                // 14: danube.ReceiveRequest
	(*StreamMessage)(nil),                 // 15: danube.StreamMessage
	(*AckRequest)(nil),                    // 16: danube.AckRequest
	(*AckResponse)(nil),                   // 17: danube.AckResponse
	(*TopicLookupRequest)(nil),            // 18: danube.TopicLookupRequest
	(*TopicLookupResponse)(nil),           // 19: danube.TopicLookupResponse
	(*SchemaRequest)(nil),                 // 20: danube.SchemaRequest
	(*SchemaResponse)(nil),                // 21: danube.SchemaResponse
	(*Schema)(nil),                        // 22: danube.Schema
	(*HealthCheckRequest)(nil),            // 23: danube.HealthCheckRequest
	(*HealthCheckResponse)(nil),           // 24: danube.HealthCheckResponse
	(*ErrorMessage)(nil),                  // 25: danube.ErrorMessage
}
var file_DanubeApi_proto_depIdxs = []int32{
	22, // 0: danube.ProducerRequest.schema:type_name -> danube.Schema
	0,  // 1: danube.ProducerRequest.producer_access_mode:type_name -> danube.ProducerAccessMode
	10, // 2: danube.MessageRequest.metadata:type_name -> danube.MessageMetadata
	2,  // 3: danube.ConsumerRequest.subscription_type:type_name -> danube.ConsumerRequest.SubscriptionType
	3,  // 4: danube.TopicLookupResponse.response_type:type_name -> danube.TopicLookupResponse.LookupType
	22, // 5: danube.SchemaResponse.schema:type_name -> danube.Schema
	4,  // 6: danube.Schema.type_schema:type_name -> danube.Schema.TypeSchema
	5,  // 7: danube.HealthCheckRequest.client:type_name -> danube.HealthCheckRequest.ClientType
	6,  // 8: danube.HealthCheckResponse.status:type_name -> danube.HealthCheckResponse.ClientStatus
	1,  // 9: danube.ErrorMessage.error_type:type_name -> danube.ErrorType
	7,  // 10: danube.ProducerService.CreateProducer:input_type -> danube.ProducerRequest
	9,  // 11: danube.ProducerService.SendMessage:input_type -> danube.MessageRequest
	12, // 12: danube.ConsumerService.Subscribe:input_type -> danube.ConsumerRequest
	14, // 13: danube.ConsumerService.ReceiveMessages:input_type -> danube.ReceiveRequest
	16, // 14: danube.ConsumerService.Ack:input_type -> danube.AckRequest
	18, // 15: danube.Discovery.TopicLookup:input_type -> danube.TopicLookupRequest
	20, // 16: danube.Discovery.GetSchema:input_type -> danube.SchemaRequest
	23, // 17: danube.HealthCheck.HealthCheck:input_type -> danube.HealthCheckRequest
	8,  // 18: danube.ProducerService.CreateProducer:output_type -> danube.ProducerResponse
	11, // 19: danube.ProducerService.SendMessage:output_type -> danube.MessageResponse
	13, // 20: danube.ConsumerService.Subscribe:output_type -> danube.ConsumerResponse
	15, // 21: danube.ConsumerService.ReceiveMessages:output_type -> danube.StreamMessage
	17, // 22: danube.ConsumerService.Ack:output_type -> danube.AckResponse
	19, // 23: danube.Discovery.TopicLookup:output_type -> danube.TopicLookupResponse
	21, // 24: danube.Discovery.GetSchema:output_type -> danube.SchemaResponse
	24, // 25: danube.HealthCheck.HealthCheck:output_type -> danube.HealthCheckResponse
	18, // [18:26] is the sub-list for method output_type
	10, // [10:18] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_DanubeApi_proto_init() }
func file_DanubeApi_proto_init() {
	if File_DanubeApi_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_DanubeApi_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ProducerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DanubeApi_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ProducerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DanubeApi_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*MessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DanubeApi_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*MessageMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DanubeApi_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*MessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DanubeApi_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ConsumerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DanubeApi_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ConsumerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DanubeApi_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ReceiveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DanubeApi_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*StreamMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DanubeApi_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*AckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DanubeApi_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*AckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DanubeApi_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*TopicLookupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DanubeApi_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*TopicLookupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DanubeApi_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*SchemaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DanubeApi_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*SchemaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DanubeApi_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*Schema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DanubeApi_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*HealthCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DanubeApi_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*HealthCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DanubeApi_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*ErrorMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_DanubeApi_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_DanubeApi_proto_goTypes,
		DependencyIndexes: file_DanubeApi_proto_depIdxs,
		EnumInfos:         file_DanubeApi_proto_enumTypes,
		MessageInfos:      file_DanubeApi_proto_msgTypes,
	}.Build()
	File_DanubeApi_proto = out.File
	file_DanubeApi_proto_rawDesc = nil
	file_DanubeApi_proto_goTypes = nil
	file_DanubeApi_proto_depIdxs = nil
}
